#!/usr/bin/yoda

# hangman useing ASCII text and system-clear
# 2017.7.19

# here are the words we have to choose from
# modified list from: https://www.prdaily.com/Main/Articles/49_unbeatable_words_for_the_game_hangman_20880.aspx
$words
("awkward", "bagpipes", "banjo", "bungler", "croquet", "crypt", "dwarves", "fervid", 
"fishhook", "fjord", "gazebo", "gypsy", "haiku", "haphazard", "hyphen", "ivory", 
"jazzy", "jiffy", "jinx", "jukebox", "kayak", "kiosk", "klutz", "memento", "mystify",
"ostracize", "oxygen", "pajama", "phlegm", "pixel", "polka", "quad", "quip", 
"rhythmic", "rogue", "sphinx", "squawk", "swivel", "toady", "twelfth", "unzip",
"waxy", "wildebeest","wingnut", "yacht", "zealous", "zigzag", "zippy", "zombie")
	=

$solved false =
$tries 13 =

# pick a word
$word $words random $words list_size 1 - * ] =

# initialize $used_letters as an empty list
# since we haven't used any letters yet
$used_letters () =


# is the value $query in the list $list
$in_list {
	{
		{ # if its in list then ret true
			true return
		} $elem $query == if
	} $list $elem foreach

	# wasn't found in list so its not there
	false return

} ($list, $query) lam =


# print the word only filling in the letters already used
$print_word { # print_word
	{ # for each letter in the word
		{ # if the letter is chosen print it, else print a blank
			"_" print
		} else {
			$c print
		} ($used_letters ~, $c ~) $in_list @ if
		" " print
	} $word "" split $c foreach

} ($word, $used_letters) lam =

# clear the screen and draw the game board
$draw_game {

	#PLANNING: drawing the figure

	# <Hangman/ASCII>
	#  __ 	:5	 67			_ _ _ _ _ _ _ 	
	# /  |	:5	5  8
	# |  0  :5	4  9		6 tries remaining
	# |  T	:5	3   10		previous: a b c d e f
	#_|_ ^	:5	012 11 		next letter:


	# clear the screen
	cls

	"Hangman in ASCII:" println

	$fails 12 $tries - =

	# 1st row
	"  " print
	{ " " print } else
	{ "_" print } $fails 6 >= if

	{ " " print } else
	{ "_" print } $fails 7 >= if
	" " print
	"        " print
	# print the word if letter is known print it else print an _
	($word ~, $used_letters ~) $print_word @


	# 2nd row
	"\n " print
	{ " " print } else
	{ "/" print } $fails 5 >= if
	"  " print
	{ " " print } else
	{ "|" print } $fails 8 >= if

	# 3rd row
	"\n " print
	{ " " print } else
	{ "|" print } $fails 4 >= if
	"  " print
	{ " " print } else
	{ "0" print } $fails 9 >= if
	"        " $tries + " guesses remaining" + println
	
	# 4th row
	" " print
	{ " " print } else
	{ "|" print } $fails 3 >= if
	"  " print
	{ " " print } else
	{ "T" print } $fails 10 >= if
	"        previous: " print

	{ # print past choices
		{
			"pass" print # pressing enter without a letter = pass 
			# can be used to increase difficulty
		} else {
			$c print
		} $c null != if
		" " print
	} $used_letters $c foreach
	
	# 5th row
	{ "\n " print } else
	{ "\n_" print } $fails 0 >= if

	{ " " print } else
	{ "|" print } $fails 2 >= if

	{ " " print } else
	{ "_" print } $fails 1 >= if
	
	" " print
	{ " " print } else
	{ "^" print } $fails 11 >= if	
	"    next guess: " print # prompt
	

} ($word, $used_letters, $tries) lam =


# have we figured out the word yet?
$is_solved {
	# if there is a letter in the word that hasn't been picked then the word hasn't
	# been solved
	{
		{
			false return
		} ($used_letters, $ch) $in_list @ ! if 
	} $word "" split $ch foreach
	true return
} ($word, $used_letters) lam = 









# this gets run until the game is over (win/loose)
{ # main loop
	# print the board
	($word ~, $used_letters ~, $tries ~) $draw_game @

	# get the user's choice
	$choice input 0 char_at =
	$used_letters $choice push_back
	
	# if the choice isn't in the word they used one of their tries
	{
		$tries --
	} ($word "" split, $choice) $in_list @ ! if 

	# check if the game is solved
	$solved ($word ~, $used_letters ~) $is_solved @ =

# while the game hasn't been solved and we still have tries remaining
} { $solved !  $tries 0 >  && } while

# draw the game once more to update the tries-count
($word ~, $used_letters ~, $tries ~) $draw_game @



# GG
{
	"Oh no, you died." println
	"the word was: " $word + println
} else {
	"Nice job! you solved it" println
} $solved if 

